import asyncio
import logging
import os
import requests
import json
from telegram import Bot as PTBBot
from telegram.error import RetryAfter, NetworkError, TelegramError
from transliterate import translit
import re
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type
import time
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config_reader import config
from bot.handlers import setup_routers
from db import Base, _engine

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs("logs", exist_ok=True)
os.makedirs("temp", exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è Bot 2, –Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–µ–µ)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] (%(funcName)s) %(message)s",
    handlers=[
        logging.FileHandler("logs/logs.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è Bot 1
FH_TOKEN = "45366da4b0dee2b0aa5cd82f18a2b7ed1b432154"
TG_TOKEN_BOT1 = "7898155636:AAFpfP3IlbzjD0nKdZMg1W1oE9F7HWCcNJg"
CHAT_ID = -4842178495
CHECK_INTERVAL = 30  # 5 –º–∏–Ω—É—Ç
SENT_FILE = "sent_projects.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot 1 (–∏—Å–ø–æ–ª—å–∑—É–µ–º PTBBot, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–º–µ–Ω —Å aiogram.Bot)
bot1 = PTBBot(token=TG_TOKEN_BOT1)


def load_sent_projects():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤."""
    if os.path.exists(SENT_FILE):
        with open(SENT_FILE, 'r') as f:
            return set(json.load(f))
    return set()


def save_sent_projects(sent_ids):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –≤ —Ñ–∞–π–ª."""
    with open(SENT_FILE, 'w') as f:
        json.dump(list(sent_ids), f)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
def check_internet():
    try:
        requests.get('https://google.com', timeout=5)
        return True
    except:
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Å retry –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–æ—à–∏–±–∫–∞—Ö
@retry(retry=retry_if_exception_type(
    (requests.exceptions.ConnectionError, requests.exceptions.Timeout, requests.exceptions.RequestException)),
       wait=wait_exponential(multiplier=1, min=4, max=30),  # –ó–∞–¥–µ—Ä–∂–∫–∞: 4—Å, 8—Å, 16—Å... –¥–æ 30—Å
       stop=stop_after_attempt(10),  # –ú–∞–∫—Å 10 –ø–æ–ø—ã—Ç–æ–∫
       reraise=True)
def get_new_projects():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å Freelancehunt API."""
    url = "https://api.freelancehunt.com/v2/projects?sort_field=created&limit=20"
    headers = {"Authorization": f"Bearer {FH_TOKEN}"}
    try:
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return []
        return response.json().get('data', [])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []


def slugify(text):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ URL-safe —Ñ–æ—Ä–º–∞—Ç."""
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º 'ru' –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ)
    text = translit(text, 'ru', reversed=True)
    # –ó–∞–º–µ–Ω–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    text = re.sub(r'[^a-zA-Z0-9]+', '-', text.lower())
    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –¥–µ—Ñ–∏—Å–æ–≤
    text = re.sub(r'-+', '-', text).strip('-')
    return text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å retry –ø—Ä–∏ flood –∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
async def send_notification(project):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
    attrs = project.get('attributes', {})
    title = attrs.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    budget = attrs.get('budget', None)
    budget_amount = budget.get('amount', '–ù–µ —É–∫–∞–∑–∞–Ω') if budget is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'
    currency = budget.get('currency', 'UAH') if budget is not None else 'UAH'
    desc = attrs.get('description', '')[:200] + ("..." if len(attrs.get('description', '')) > 200 else "")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    slug = slugify(title)
    link = f"https://freelancehunt.com/project/{slug}/{project['id']}.html"

    message = f"üÜï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç!\n\n**{title}**\nüí∞ –ë—é–¥–∂–µ—Ç: {budget_amount} {currency}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\nüîó –°—Å—ã–ª–∫–∞: {link}"

    attempts = 0
    max_attempts = 10
    while attempts < max_attempts:
        try:
            await bot1.send_message(chat_id=CHAT_ID, text=message, parse_mode='Markdown')
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {title}")
            return True  # –£—Å–ø–µ—Ö
        except RetryAfter as e:
            wait_time = e.retry_after + 1  # –ñ–¥—ë–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è +1—Å
            print(f"Flood control: –∂–¥—É {wait_time} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(wait_time)
        except NetworkError as e:
            print(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}. –ñ–¥—É 10 —Å–µ–∫—É–Ω–¥ –∏ retry...")
            await asyncio.sleep(10)
        except TelegramError as e:
            print(f"Telegram –æ—à–∏–±–∫–∞: {e}. –ñ–¥—É 5 —Å–µ–∫—É–Ω–¥ –∏ retry...")
            await asyncio.sleep(5)
        attempts += 1
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {title} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫.")
    return False


async def bot1_main():
    sent_ids = load_sent_projects()
    print("–ë–æ—Ç 1 –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...")

    while True:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        if not check_internet():
            print("–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –ñ–¥—É 10 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–≤—Ç–æ—Ä—è—é...")
            await asyncio.sleep(10)
            continue

        projects = get_new_projects()
        new_projects = [p for p in projects if p['id'] not in sent_ids]

        for project in new_projects:
            success = await send_notification(project)
            if success:
                sent_ids.add(project['id'])
            # –ï—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ

        if new_projects:
            save_sent_projects(sent_ids)
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(new_projects)} –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.")

        print("–ù–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ñ–¥—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
        await asyncio.sleep(CHECK_INTERVAL)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot 2
bot2 = Bot(
    token=config.BOT_TOKEN.get_secret_value(),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

scheduler = AsyncIOScheduler()
scheduler.configure(timezone="Europe/Moscow")


async def start_polling() -> None:
    scheduler.start()
    dp.include_router(setup_routers())
    await bot2.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot2, scheduler=scheduler)


@dp.startup()
async def on_startup() -> None:
    async with _engine.begin() as connection:
        await connection.run_sync(Base.metadata.drop_all)
        await connection.run_sync(Base.metadata.create_all)


@dp.shutdown()
async def on_shutdown() -> None:
    await _engine.dispose()
    scheduler.shutdown(wait=False)


async def main_combined():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Bot 1 –∫–∞–∫ –∑–∞–¥–∞—á—É
    bot1_task = asyncio.create_task(bot1_main())

    # –ó–∞–ø—É—Å–∫–∞–µ–º Bot 2 (polling –±–ª–æ–∫–∏—Ä—É–µ—Ç, —Ç–∞–∫ —á—Ç–æ –æ–Ω –ø–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ)
    await start_polling()

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á (—Ö–æ—Ç—è polling –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è)
    await bot1_task


if __name__ == "__main__":
    asyncio.run(main_combined())